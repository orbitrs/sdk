name: Orbit Framework CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'orbit-mcp/**'
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'orbit-mcp/**'
      - 'docs/**'
      - '*.md'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:  # Fast feedback job for quick iteration - Core Framework Only
  fast-check:
    name: Fast Check (Core Framework)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
    - name: Install system dependencies (Linux)
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libgl1-mesa-dev xorg-dev libfontconfig1-dev libfreetype6-dev
    - name: Fast workspace check
      run: |
        echo "Checking core framework workspace: orbit, orlint, orbiton, examples"
        cargo check --workspace --all-targets
  # Comprehensive testing across platforms - stable channel (required)
  test-stable:
    name: Test Suite (Stable - Core Framework)
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        components: clippy
    - uses: Swatinem/rust-cache@v2
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libgl1-mesa-dev xorg-dev libfontconfig1-dev libfreetype6-dev
    - name: Run tests
      run: cargo test --workspace --features desktop
    - name: Run clippy
      run: cargo clippy --workspace --all-targets --features desktop -- -D warnings
  # Testing on beta channel (non-blocking)
  test-beta:
    name: Test Suite (Beta - Non-blocking Core Framework)
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    continue-on-error: true
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      # Ensure we collect results from all matrix runs
      fail-fast: false
    outputs:
      # Use the ubuntu run as the source of truth for failures
      # This ensures we have consistent output across the matrix
      failure_details: ${{ steps.collect_failures.outputs.failure_details }}
      has_failures: ${{ steps.collect_failures.outputs.has_failures }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: beta
        components: clippy
    - uses: Swatinem/rust-cache@v2
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libgl1-mesa-dev xorg-dev libfontconfig1-dev libfreetype6-dev
        
    # Test each package separately to identify failures by package (excluding orbit-mcp)
    - name: Test orbit package
      id: orbit_tests
      continue-on-error: true
      run: cargo test -p orbit --features desktop
      
    - name: Test orlint package
      id: orlint_tests
      continue-on-error: true
      run: cargo test -p orlint
      
    - name: Test orbiton package
      id: orbiton_tests
      continue-on-error: true
      run: cargo test -p orbiton --features desktop
      
    - name: Test examples package
      id: examples_tests
      continue-on-error: true
      run: cargo test -p examples --features desktop
      
    # Clippy checks per package (excluding orbit-mcp)
    - name: Clippy orbit package
      id: orbit_clippy
      continue-on-error: true
      run: cargo clippy -p orbit --features desktop -- -D warnings
      
    - name: Clippy orlint package
      id: orlint_clippy
      continue-on-error: true
      run: cargo clippy -p orlint -- -D warnings    
    
    - name: Clippy orbiton package
      id: orbiton_clippy
      continue-on-error: true
      run: cargo clippy -p orbiton --features desktop -- -D warnings
      
    - name: Clippy examples package
      id: examples_clippy
      continue-on-error: true
      run: cargo clippy -p examples --features desktop -- -D warnings
      
    - name: Collect package failures
      id: collect_failures
      shell: bash
      run: |
        # Build a JSON array of failures
        echo "Building JSON array of failures..."
        FAILURES="["
        
        # Check each package for failures
        if [[ "${{ steps.orbit_tests.outcome }}" == "failure" || "${{ steps.orbit_clippy.outcome }}" == "failure" ]]; then
          FAILURES+='{"package": "orbit", "status": "failed", "repo": "orbitrs/orbit"},'
        fi
        
        if [[ "${{ steps.orlint_tests.outcome }}" == "failure" || "${{ steps.orlint_clippy.outcome }}" == "failure" ]]; then
          FAILURES+='{"package": "orlint", "status": "failed", "repo": "orbitrs/orlint"},'
        fi
        
        if [[ "${{ steps.orbiton_tests.outcome }}" == "failure" || "${{ steps.orbiton_clippy.outcome }}" == "failure" ]]; then
          FAILURES+='{"package": "orbiton", "status": "failed", "repo": "orbitrs/orbiton"},'
        fi
        
        if [[ "${{ steps.examples_tests.outcome }}" == "failure" || "${{ steps.examples_clippy.outcome }}" == "failure" ]]; then
          FAILURES+='{"package": "examples", "status": "failed", "repo": "orbitrs/sdk"},'
        fi
        
        # Remove trailing comma if any failures were detected
        if [[ "$FAILURES" != "[" ]]; then
          FAILURES="${FAILURES%,}"
        fi
        
        FAILURES+="]"
          # Determine if we have failures
        if [[ "$FAILURES" == "[]" ]]; then
          echo "has_failures=false" >> $GITHUB_OUTPUT
        else
          echo "has_failures=true" >> $GITHUB_OUTPUT
        fi
        
        # Output the failures JSON
        echo "failure_details=$FAILURES" >> $GITHUB_OUTPUT
        
    - name: Report failures to summary
      if: steps.collect_failures.outputs.has_failures == 'true'
      shell: bash
      run: |
        echo "## ⚠️ Beta Toolchain Failures Detected" >> $GITHUB_STEP_SUMMARY
        echo "This is non-blocking information for monitoring Rust beta compatibility." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform:** ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        
        # Display package-specific failures
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Package Status" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.orbit_tests.outcome }}" == "failure" ]]; then
          echo "- **orbit tests:** Failed ❌" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **orbit tests:** Passed ✅" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ steps.orlint_tests.outcome }}" == "failure" ]]; then
          echo "- **orlint tests:** Failed ❌" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **orlint tests:** Passed ✅" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ steps.orbiton_tests.outcome }}" == "failure" ]]; then
          echo "- **orbiton tests:** Failed ❌" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **orbiton tests:** Passed ✅" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ steps.examples_tests.outcome }}" == "failure" ]]; then
          echo "- **examples tests:** Failed ❌" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **examples tests:** Passed ✅" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Clippy Status" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.orbit_clippy.outcome }}" == "failure" ]]; then
          echo "- **orbit clippy:** Failed ❌" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **orbit clippy:** Passed ✅" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ steps.orlint_clippy.outcome }}" == "failure" ]]; then
          echo "- **orlint clippy:** Failed ❌" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **orlint clippy:** Passed ✅" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ steps.orbiton_clippy.outcome }}" == "failure" ]]; then
          echo "- **orbiton clippy:** Failed ❌" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **orbiton clippy:** Passed ✅" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ steps.examples_clippy.outcome }}" == "failure" ]]; then
          echo "- **examples clippy:** Failed ❌" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **examples clippy:** Passed ✅" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please review full logs in the Actions tab for details." >> $GITHUB_STEP_SUMMARY
        fi
  # Build verification
  build:
    name: Build Verification (Core Framework)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [fast-check, test-stable]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
    - name: Install system dependencies (Linux)
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libgl1-mesa-dev xorg-dev libfontconfig1-dev libfreetype6-dev
    - name: Build all core crates (excluding orbit-mcp)
      run: cargo build --workspace --exclude orbit-mcp --features desktop
    - name: Build examples
      run: cargo build --manifest-path examples/Cargo.toml --features desktop
  # WebAssembly build verification
  wasm-build:
    name: WebAssembly Build (Core Framework)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test-stable]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    - uses: Swatinem/rust-cache@v2
    - name: Install system dependencies (Linux)
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libgl1-mesa-dev xorg-dev libfontconfig1-dev libfreetype6-dev
    - name: Install wasm-pack
      run: cargo install wasm-pack
    - name: Build for WebAssembly (excluding orbit-mcp)
      env:
        RUSTFLAGS: "--cfg=web_sys_unstable_apis"
      run: |
        cargo build --target wasm32-unknown-unknown --package orbit --no-default-features --features="web"
        cargo build --target wasm32-unknown-unknown --package examples --no-default-features --features="web"  # Documentation generation and deployment
  docs:
    name: Documentation (Core Framework)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # Always run documentation build but only deploy on main
    needs: [test-stable]
    if: ${{ always() }}
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
    - name: Install system dependencies (Linux)
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libgl1-mesa-dev xorg-dev libfontconfig1-dev libfreetype6-dev
        
    # Ensure the GitHub Copilot CLI documentation is up-to-date
    - name: Verify GitHub Copilot CLI documentation
      run: |
        if [ -f docs/tooling/github-copilot-cli.md ]; then
          echo "✓ GitHub Copilot CLI documentation exists"
        else          echo "Creating GitHub Copilot CLI documentation..."
          mkdir -p docs/tooling
          # Copy from the template
          cp -f scripts/docs-templates/github-copilot-cli-template.md docs/tooling/github-copilot-cli.md || echo "Template not found, documentation will be generated by the docs job"
        fi    
    - name: Generate documentation (excluding orbit-mcp)
      run: cargo doc --workspace --exclude orbit-mcp --no-default-features --no-deps
      
    - name: Create documentation landing page from template
      run: |        # Get build information
        BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M UTC")
        VERSION="0.1.0-dev"
        BRANCH="${GITHUB_REF#refs/heads/}"
        
        # Copy static assets to documentation directory
        mkdir -p ./target/doc/static
        cp docs/static/styles.css ./target/doc/styles.css
        
        # Generate the index.html from template with variable substitution
        sed -e "s/{{VERSION}}/$VERSION/g" \
            -e "s/{{BUILD_DATE}}/$BUILD_DATE/g" \
            -e "s/{{BRANCH}}/$BRANCH/g" \
            docs/static/index.html.template > ./target/doc/index.html
        
        # Ensure the paths are correct for the generated documentation
        echo "Documentation landing page generated from template with build info:"
        echo "- Version: $VERSION"
        echo "- Built: $BUILD_DATE" 
        echo "- Branch: $BRANCH"
    - name: Setup Pages
      id: setup-pages
      continue-on-error: true
      uses: actions/configure-pages@v4
      with:
        enablement: true
    - name: Upload artifact
      if: steps.setup-pages.outcome == 'success' && github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: './target/doc'
    - name: Deploy to GitHub Pages
      if: steps.setup-pages.outcome == 'success' && github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v4
      
  # Consolidate beta test results from all platforms
  beta-consolidate:
    name: Consolidate Beta Test Results    
    runs-on: ubuntu-latest
    needs: [test-beta]
    if: always()
    outputs:
      consolidated_failures: ${{ steps.consolidate.outputs.consolidated_failures }}
      has_failures: ${{ steps.consolidate.outputs.has_failures }}
    steps:
      - name: Consolidate results
        id: consolidate
        shell: bash
        run: |
          # Use the output from test-beta job directly
          FAILURES='${{ needs.test-beta.outputs.failure_details }}'
          
          # If we have failures, mark as failed
          if [[ "$FAILURES" == "[]" || -z "$FAILURES" ]]; then
            echo "has_failures=false" >> $GITHUB_OUTPUT
            echo "consolidated_failures=[]" >> $GITHUB_OUTPUT
          else
            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "consolidated_failures=$FAILURES" >> $GITHUB_OUTPUT
          fi
  
  # Beta compatibility reporting
  beta-report:
    name: Beta Compatibility Report
    runs-on: ubuntu-latest
    needs: [beta-consolidate]
    if: always()
    permissions:
      issues: write
      contents: read    
      steps:
      - uses: actions/checkout@v4
      
      - name: Get beta version
        id: get-beta-version
        if: needs.beta-consolidate.outputs.has_failures == 'true'
        shell: bash
        run: |
          rustup default beta
          BETA_VERSION=$(rustc --version)
          echo "beta_version=$BETA_VERSION" >> $GITHUB_OUTPUT
          
      - name: Process failure data
        id: process-failures
        if: needs.beta-consolidate.outputs.has_failures == 'true'
        shell: bash
        run: |
          # Get the failures from beta-consolidate job output
          FAILURES='${{ needs.beta-consolidate.outputs.consolidated_failures }}'
          echo "Failure details: $FAILURES"
          
          # Create a deduplicated list of repos with failures
          REPOS=$(echo "$FAILURES" | jq -r '.[].repo' | sort -u)
          echo "repos=$REPOS" >> $GITHUB_OUTPUT
          
          # Store the full failure details for reports
          echo "failures=$FAILURES" >> $GITHUB_OUTPUT
      
      - name: Create summary report
        shell: bash
        run: |
          echo "# 📊 Rust Beta Compatibility Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This is an informational report and does not block the pipeline." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Report job status using consolidated results
          if [[ "${{ needs.beta-consolidate.outputs.has_failures }}" == "false" ]]; then
            echo "✅ **All beta tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.beta-consolidate.outputs.has_failures }}" == "true" ]]; then
            echo "⚠️ **Beta compatibility failures detected**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Parse the failures JSON array
            echo '${{ steps.process-failures.outputs.failures }}' | jq -r '.[] | "- **" + .package + "**: Failed"' >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Issues will be created in each affected repository." >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Beta tests were skipped or canceled**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "See individual job results for more details." >> $GITHUB_STEP_SUMMARY
      
      # Create separate issues for each repository
      - name: Create issues for orbit repository
        if: needs.beta-consolidate.outputs.has_failures == 'true' && contains(steps.process-failures.outputs.repos, 'orbitrs/orbit')
        uses: ./.github/actions/handle-non-blocking-job
        with:
          job-name: "Rust Beta Compatibility - orbit"
          job-result: 'failure'
          issue-label: "beta-compatibility"
          issue-title-prefix: "Rust Beta Compatibility Issue - orbit"
          target-repo: "orbitrs/orbit"
          version-info: ${{ steps.get-beta-version.outputs.beta_version || 'Unknown beta version' }}
          failure-details: ${{ steps.process-failures.outputs.failures }}
          
      - name: Create issues for orlint repository
        if: needs.beta-consolidate.outputs.has_failures == 'true' && contains(steps.process-failures.outputs.repos, 'orbitrs/orlint')
        uses: ./.github/actions/handle-non-blocking-job
        with:
          job-name: "Rust Beta Compatibility - orlint"
          job-result: 'failure'
          issue-label: "beta-compatibility"
          issue-title-prefix: "Rust Beta Compatibility Issue - orlint"
          target-repo: "orbitrs/orlint"
          version-info: ${{ steps.get-beta-version.outputs.beta_version || 'Unknown beta version' }}
          failure-details: ${{ steps.process-failures.outputs.failures }}
          
      - name: Create issues for orbiton repository
        if: needs.test-beta.result == 'failure' && contains(steps.process-failures.outputs.repos, 'orbitrs/orbiton')
        uses: ./.github/actions/handle-non-blocking-job
        with:
          job-name: "Rust Beta Compatibility - orbiton"
          job-result: 'failure'
          issue-label: "beta-compatibility"
          issue-title-prefix: "Rust Beta Compatibility Issue - orbiton"
          target-repo: "orbitrs/orbiton"
          version-info: ${{ steps.get-beta-version.outputs.beta_version || 'Unknown beta version' }}
          failure-details: ${{ steps.process-failures.outputs.failures }}
          
      - name: Create issues for SDK repository (for examples failures)
        if: needs.test-beta.result == 'failure' && contains(steps.process-failures.outputs.repos, 'orbitrs/sdk')
        uses: ./.github/actions/handle-non-blocking-job
        with:
          job-name: "Rust Beta Compatibility - examples"
          job-result: 'failure'
          issue-label: "beta-compatibility"
          issue-title-prefix: "Rust Beta Compatibility Issue - SDK examples"
          target-repo: "orbitrs/sdk"
          version-info: ${{ steps.get-beta-version.outputs.beta_version || 'Unknown beta version' }}
          failure-details: ${{ steps.process-failures.outputs.failures }}
